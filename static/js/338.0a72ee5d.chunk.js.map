{"version":3,"file":"static/js/338.0a72ee5d.chunk.js","mappings":"oRAGMA,EAAU,mCAGVC,EAAe,QAIrBC,EAAAA,EAAAA,SAAAA,QARiB,gCASjB,IAAMC,EAAY,SAAAC,GAAI,OAAIF,EAAAA,EAAAA,IAAUE,GAAMC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,IAAN,GAA1B,EAETC,EAAqB,kBAChCL,EAAU,GAAD,OAVW,gBAUX,oBAA6BH,GADN,EAGrBS,EAAqB,SAAC,GAAD,QAAGC,MAAAA,OAAH,MAAW,WAAX,MAAuBC,KAAAA,OAAvB,MAA8B,EAA9B,SAChCR,EAAU,GAAD,OAZQ,eAYR,oBAA0BH,EAA1B,kBAA2CU,EAA3C,YAAoDC,GAD7B,EAGrBC,EAAmB,SAAAC,GAAO,OACrCV,EAAU,GAAD,OAAIF,EAAJ,YAAoBY,EAApB,oBAAuCb,GADX,EAG1Bc,EAAgB,SAAAD,GAAO,OAClCV,EAAU,GAAD,OACJF,EADI,YACYY,EADZ,YAhBU,UAgBV,oBAC+Cb,IACtDK,MAAK,SAAAC,GAAC,OAAIA,EAAES,KAAKC,MAAM,EAAG,GAApB,GAH0B,EAKvBC,EAAmB,SAAAJ,GAAO,OACrCV,EAAU,GAAD,OACJF,EADI,YACYY,EADZ,YApBU,UAoBV,oBAC+Cb,IACtDK,MAAK,SAAAC,GAAC,OAAIA,EAAEY,QAAQF,MAAM,EAAG,GAAvB,GAH6B,C,6ECvBjCG,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IAClBC,GAAYD,EAAAA,EAAAA,OAAK,kBAAM,4BAAN,IAqDvB,UAnDoB,WAClB,OAAwCE,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAcT,EAAaU,IAAI,UAAY,GAC3CC,EAAaC,SAASZ,EAAaU,IAAI,SAAW,GAEpDD,IAAgBN,GAAaC,EAAeK,GAC5CE,IAAeN,GAAYC,EAAcK,IAE7CE,EAAAA,EAAAA,YAAU,WACY,KAAhBV,EAAoBK,EAAY,CAAC,IAEnCtB,EAAAA,EAAAA,IAAmB,CAAEC,MAAOgB,EAAaf,KAAMiB,IAAcvB,KAC3D0B,EAEL,GAAE,CAACL,EAAaE,IAEjB,IAAMS,EAAW,SAAAC,GACd,OAADA,QAAC,IAADA,GAAAA,EAAGC,iBACH,IAAMC,EAAcC,OAAOH,EAAEI,cAAchC,MAAMiC,OAAOC,OAEpC,KAAhBJ,GAAoBhB,EAAgB,CAAEd,MAAO8B,EAAa7B,KAAM,GACrE,EAED,OAAKmB,EAASe,eAUZC,SAASC,MAAT,yBAAmCrB,IAGjC,UAAC,EAAAsB,SAAD,CAAUC,UAAU,sCAApB,WACE,SAAC9B,EAAD,CAAY+B,gBAAiBb,KAC7B,SAAChB,EAAD,CACES,SAAUA,EACVqB,MAAO,CAAEC,KAAK,iBAAD,OAAmB1B,GAAe2B,QAAS,WAhB9DP,SAASC,MAAQ,gBAGf,UAAC,EAAAC,SAAD,CAAUC,UAAU,sCAApB,WACE,SAAC9B,EAAD,CAAY+B,gBAAiBb,IACA,KAApB,OAARP,QAAQ,IAARA,OAAA,EAAAA,EAAUe,iBAAuB,4CAgBzC,C","sources":["api/fethcFilms.js","components/SearchMovie/searchMovie.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '964aa706dab4c3295b22f686e0c720cc';\nconst PATH_TRENDING = 'movie/popular';\nconst PATH_MOVIE = 'search/movie';\nconst PATH_DETAILS = 'movie';\nconst PATH_CREDITS = 'credits';\nconst PATH_REVIEWS = 'reviews';\n\naxios.defaults.baseURL = BASE_URL;\nconst fetchPath = path => axios.get(path).then(r => r.data);\n\nexport const fetchTrendingFilms = () =>\n  fetchPath(`${PATH_TRENDING}?api_key=${API_KEY}`);\n\nexport const fetchSearchedFilms = ({ query = 'trending', page = 1 }) =>\n  fetchPath(`${PATH_MOVIE}?api_key=${API_KEY}&query=${query}&${page}`);\n\nexport const fetchFilmDetails = movieId =>\n  fetchPath(`${PATH_DETAILS}/${movieId}?api_key=${API_KEY}`);\n\nexport const fetchFilmCast = movieId =>\n  fetchPath(\n    `${PATH_DETAILS}/${movieId}/${PATH_CREDITS}?api_key=${API_KEY}`\n  ).then(r => r.cast.slice(0, 10));\n\nexport const fetchFilmReviews = movieId =>\n  fetchPath(\n    `${PATH_DETAILS}/${movieId}/${PATH_REVIEWS}?api_key=${API_KEY}`\n  ).then(r => r.results.slice(0, 10));\n","import { lazy, Suspense, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchedFilms } from 'api/fethcFilms';\n\nconst SearchForm = lazy(() => import('../SearchForm/searchForm'));\nconst MovieList = lazy(() => import('../MovieList/movieList'));\n\nconst SearchMovie = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchPage, setSearchPage] = useState(1);\n  const [filmList, setFilmList] = useState([]);\n\n  const paramsQuery = searchParams.get('query') || '';\n  const paramsPage = parseInt(searchParams.get('page') || 1);\n\n  if (paramsQuery !== searchQuery) setSearchQuery(paramsQuery);\n  if (paramsPage !== searchPage) setSearchPage(paramsPage);\n\n  useEffect(() => {\n    if (searchQuery === '') setFilmList({});\n    else\n      fetchSearchedFilms({ query: searchQuery, page: searchPage }).then(\n        setFilmList\n      );\n  }, [searchQuery, searchPage]);\n\n  const onSubmit = e => {\n    e?.preventDefault();\n    const searchValue = String(e.currentTarget.query.value).trim();\n\n    if (searchValue !== '') setSearchParams({ query: searchValue, page: 1 });\n  };\n\n  if (!filmList.total_results) {\n    document.title = 'Movie search';\n\n    return (\n      <Suspense fallback={<p>Loading...</p>}>\n        <SearchForm onSubmitHandler={onSubmit} />\n        {filmList?.total_results === 0 && <p>Nothing found</p>}\n      </Suspense>\n    );\n  } else {\n    document.title = `Movie search - ${searchQuery}`;\n\n    return (\n      <Suspense fallback={<p>Loading...</p>}>\n        <SearchForm onSubmitHandler={onSubmit} />\n        <MovieList\n          filmList={filmList}\n          state={{ from: `/movies?query=${searchQuery}`, addPath: '' }}\n        />\n      </Suspense>\n    );\n  }\n};\n\nexport default SearchMovie;\n"],"names":["API_KEY","PATH_DETAILS","axios","fetchPath","path","then","r","data","fetchTrendingFilms","fetchSearchedFilms","query","page","fetchFilmDetails","movieId","fetchFilmCast","cast","slice","fetchFilmReviews","results","SearchForm","lazy","MovieList","useSearchParams","searchParams","setSearchParams","useState","searchQuery","setSearchQuery","searchPage","setSearchPage","filmList","setFilmList","paramsQuery","get","paramsPage","parseInt","useEffect","onSubmit","e","preventDefault","searchValue","String","currentTarget","value","trim","total_results","document","title","Suspense","fallback","onSubmitHandler","state","from","addPath"],"sourceRoot":""}